# Generated by Django 5.1.2 on 2024-11-25 02:38

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('slot_machines', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SlotMachineMaintenanceForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_description', models.TextField(blank=True, null=True)),
                ('operational_status', models.CharField(choices=[('IN_SERVICE', 'In Service'), ('OUT_OF_SERVICE', 'Out of Service')], default='IN_SERVICE', max_length=20)),
                ('maintenance_status', models.CharField(choices=[('TROUBLESHOOTING', 'Troubleshooting'), ('AWAITING_PARTS', 'Awaiting Parts'), ('NEEDS_MEM_CLEAR', 'Needs Mem Clear'), ('CONVERSION', 'Conversion'), ('INSTALL', 'Install'), ('MONITORING', 'Monitoring'), ('REPAIRED', 'Repaired')], default='TROUBLESHOOTING', max_length=20)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('completion_date', models.DateTimeField(blank=True, help_text='Date when maintenance was completed', null=True)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slot_machines.slotmachine')),
            ],
        ),
        migrations.CreateModel(
            name='PartRequired',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_per_unit', models.DecimalField(blank=True, decimal_places=2, help_text='Price per individual part', max_digits=10, null=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('date_requested', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the part was requested')),
                ('date_fulfilled', models.DateTimeField(blank=True, help_text='Date when the part request was fulfilled', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SITE_REQ', 'Site Requested'), ('CO_SENT', 'CO Sent'), ('CO_ORDERED', 'CO Ordered'), ('FULFILLED', 'Fulfilled')], default='PENDING', max_length=20)),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.inventoryitem')),
                ('maintenance_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts_required', to='maintenance.slotmachinemaintenanceform')),
            ],
        ),
        migrations.CreateModel(
            name='LogicSeals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_seal_serial', models.CharField(blank=True, help_text='Serial number of the initial seal before accessing logic.', max_length=20, null=True)),
                ('initial_seal_verified_by_security', models.BooleanField(default=False, help_text='Has the initial seal been verified by security?')),
                ('initial_seal_verified_date', models.DateTimeField(blank=True, help_text='Date when the initial seal was verified by security.', null=True)),
                ('new_seal_serial', models.CharField(blank=True, help_text='Serial number of the new seal applied after work is completed.', max_length=20, null=True)),
                ('new_seal_verified_by_security', models.BooleanField(default=False, help_text='Has the new seal been verified by security?')),
                ('new_seal_verified_date', models.DateTimeField(blank=True, help_text='Date when the new seal was verified by security.', null=True)),
                ('work_completed_date', models.DateTimeField(blank=True, help_text='Date when the technician completed their work and applied the new seal.', null=True)),
                ('technician', models.ForeignKey(blank=True, help_text='Technician who applied the new seal.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logic_seal_technician', to=settings.AUTH_USER_MODEL)),
                ('casino_test_record', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logic_seals', to='maintenance.slotmachinemaintenanceform')),
            ],
        ),
        migrations.CreateModel(
            name='Kobetron',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rom_position', models.CharField(help_text='Position of the ROM', max_length=50)),
                ('program_number', models.CharField(help_text='Program number of the ROM', max_length=50)),
                ('mfg_date', models.DateField(help_text='Manufacturing date of the ROM')),
                ('kobetron_signature', models.CharField(help_text='Kobetron number', max_length=50)),
                ('security_reviewed', models.BooleanField(default=False, help_text='Indicates whether security has reviewed and approved this record')),
                ('security_review_date', models.DateTimeField(blank=True, help_text='Date when security reviewed the record', null=True)),
                ('technician_signature', models.ForeignKey(blank=True, help_text='Technician who signed off', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='technician_signatures', to=settings.AUTH_USER_MODEL)),
                ('slot_machine_maintenance_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kobetron_records', to='maintenance.slotmachinemaintenanceform')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Description of the suggested task')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed')], default='PENDING', help_text='Current status of the task', max_length=20)),
                ('date_assigned', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the task was assigned')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Date and time when the task was completed', null=True)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who assigned the task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_by_tasks', to=settings.AUTH_USER_MODEL)),
                ('maintenance_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='maintenance.slotmachinemaintenanceform')),
            ],
        ),
        migrations.CreateModel(
            name='TroubleshootingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('narrative', models.TextField(blank=True, help_text='Enter actions taken, outcome, and additional brief details', null=True)),
                ('time_spent', models.DurationField(help_text='Time spent on troubleshooting')),
                ('date_performed', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of troubleshooting action')),
                ('maintenance_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='troubleshooting_logs', to='maintenance.slotmachinemaintenanceform')),
                ('performed_by', models.ForeignKey(blank=True, help_text='User who performed the troubleshooting', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
